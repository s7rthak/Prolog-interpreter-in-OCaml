type token =
  | LPAR
  | RPAR
  | EOL
  | IMP
  | AND
  | EOF
  | LBRAC
  | RBRAC
  | QUO
  | VAR of (string)
  | NVAR of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Prolog
# 19 "parser.ml"
let yytransl_const = [|
  257 (* LPAR *);
  258 (* RPAR *);
  259 (* EOL *);
  260 (* IMP *);
  261 (* AND *);
    0 (* EOF *);
  262 (* LBRAC *);
  263 (* RBRAC *);
  264 (* QUO *);
    0|]

let yytransl_block = [|
  265 (* VAR *);
  266 (* NVAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\004\000\006\000\005\000\
\005\000\008\000\009\000\007\000\007\000\010\000\010\000\010\000\
\011\000\012\000\000\000\000\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\002\000\008\000\001\000\004\000\002\000\
\003\000\001\000\001\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\019\000\000\000\006\000\
\003\000\020\000\000\000\010\000\000\000\000\000\021\000\000\000\
\001\000\000\000\004\000\008\000\000\000\000\000\018\000\000\000\
\016\000\000\000\000\000\014\000\015\000\002\000\011\000\009\000\
\000\000\007\000\000\000\000\000\013\000\000\000\000\000\000\000\
\005\000"

let yydgoto = "\004\000\
\006\000\010\000\015\000\007\000\011\000\008\000\026\000\013\000\
\032\000\027\000\028\000\029\000"

let yysindex = "\009\000\
\250\254\001\000\012\255\000\000\018\255\000\000\010\255\000\000\
\000\000\000\000\001\000\000\000\004\255\013\255\000\000\007\255\
\000\000\250\254\000\000\000\000\250\254\014\255\000\000\018\255\
\000\000\020\255\015\255\000\000\000\000\000\000\000\000\000\000\
\022\255\000\000\007\255\016\255\000\000\019\255\021\255\026\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\
\000\000\000\000\028\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\241\255\012\000\000\000\000\000\000\000\254\255\252\255\000\000\
\000\000\000\000\000\000\000\000"

let yytablesize = 267
let yytable = "\012\000\
\009\000\017\000\030\000\005\000\017\000\031\000\020\000\021\000\
\012\000\001\000\002\000\003\000\017\000\025\000\018\000\023\000\
\024\000\014\000\016\000\035\000\022\000\034\000\019\000\033\000\
\036\000\038\000\039\000\040\000\041\000\012\000\037\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000"

let yycheck = "\002\000\
\000\000\002\001\018\000\010\001\005\001\021\000\003\001\004\001\
\011\000\001\000\002\000\003\000\003\001\016\000\005\001\009\001\
\010\001\006\001\001\001\005\001\008\001\002\001\011\000\010\001\
\003\001\010\001\008\001\007\001\003\001\002\001\035\000\255\255\
\035\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\010\001"

let yynames_const = "\
  LPAR\000\
  RPAR\000\
  EOL\000\
  IMP\000\
  AND\000\
  EOF\000\
  LBRAC\000\
  RBRAC\000\
  QUO\000\
  "

let yynames_block = "\
  VAR\000\
  NVAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'query) in
    Obj.repr(
# 18 "parser.mly"
                                                ([_1])
# 176 "parser.ml"
               : Prolog.goal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'query) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Prolog.goal) in
    Obj.repr(
# 19 "parser.mly"
                                                (_1 :: _3)
# 184 "parser.ml"
               : Prolog.goal))
; (fun __caml_parser_env ->
    Obj.repr(
# 23 "parser.mly"
                                                ([])
# 190 "parser.ml"
               : Prolog.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Prolog.program) in
    Obj.repr(
# 24 "parser.mly"
                                                (_1 :: _2)
# 198 "parser.ml"
               : Prolog.program))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    Obj.repr(
# 27 "parser.mly"
                                                (let a = _3 ^ "." ^ _5 in a)
# 206 "parser.ml"
               : string))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atofor) in
    Obj.repr(
# 30 "parser.mly"
                                                (_1)
# 213 "parser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term_list) in
    Obj.repr(
# 33 "parser.mly"
                                                (Atofor(_1,_3))
# 221 "parser.ml"
               : 'atofor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'head) in
    Obj.repr(
# 37 "parser.mly"
                                                (Fact(_1))
# 228 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'head) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 38 "parser.mly"
                                                (Rule(_1,_3))
# 236 "parser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atofor) in
    Obj.repr(
# 41 "parser.mly"
                                                (_1)
# 243 "parser.ml"
               : 'head))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Prolog.goal) in
    Obj.repr(
# 44 "parser.mly"
                                                (_1)
# 250 "parser.ml"
               : 'body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 48 "parser.mly"
                                                ([_1])
# 257 "parser.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term_list) in
    Obj.repr(
# 49 "parser.mly"
                                                (_1 :: _3)
# 265 "parser.ml"
               : 'term_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 53 "parser.mly"
                                                (C(_1))
# 272 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 54 "parser.mly"
                                                (V(_1))
# 279 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atofor) in
    Obj.repr(
# 55 "parser.mly"
                                                (F(_1))
# 286 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                                               (Constant(_1))
# 293 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "parser.mly"
                                               (Variable(_1))
# 300 "parser.ml"
               : 'variable))
(* Entry repl *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry database *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let repl (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Prolog.goal)
let database (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Prolog.program)
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : string)
